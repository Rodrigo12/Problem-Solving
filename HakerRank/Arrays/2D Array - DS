Link:
https://www.hackerrank.com/challenges/repeated-string/problem?h_l=interview&playlist_slugs%5B%5D=interview-preparation-kit&playlist_slugs%5B%5D=warmup&h_r=next-challenge&h_v=zen

____________________________________________________________________________________________________________________________
Problem:

Given a 6x6 2D Array, arr:
1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0
0 0 0 0 0 0

We define an hourglass in A to be a subset of values with indices falling in this pattern in arr's graphical representation:
a b c
  d
e f g
There are 16 hourglasses in arr, and an hourglass sum is the sum of an hourglass' values. Calculate the hourglass sum for every hourglass in arr, then print the maximum hourglass sum.

For example, given the 2D array:
-9 -9 -9  1 1 1
 0 -9  0  4 3 2
-9 -9 -9  1 2 3
 0  0  8  6 6 0
 0  0  0 -2 0 0
 0  0  1  2 4 0

We calculate the following 16 hourglass values:
-63, -34, -9, 12,
-10, 0, 28, 23,
-27, -11, -2, 10,
9, 17, 25, 18

Our highest hourglass value is 28 from the hourglass:
0 4 3
  1
8 6 6
Note: If you have already solved the Java domain's Java 2D Array challenge, you may wish to skip this challenge.

Function Description
Complete the function hourglassSum in the editor below. It should return an integer, the maximum hourglass sum in the array.

hourglassSum has the following parameter(s):
arr: an array of integers

Input Format
Each of the 6 lines of inputs arr[i] contains 6 space-separated integers arr[i][j].

Constraints
-9 <= arr[i][j] <= 9
0 <= i,j <= 5

Output Format
Print the largest (maximum) hourglass sum found in arr.

Sample Input
1 1 1 0 0 0
0 1 0 0 0 0
1 1 1 0 0 0
0 0 2 4 4 0
0 0 0 2 0 0
0 0 1 2 4 0

Sample Output
19

The hourglass with the maximum sum () is:
2 4 4
  2
1 2 4

____________________________________________________________________________________________________________________________
Solution:

// Complete the hourglassSum function below.
    static int hourglassSum(int[][] arr) {
        int highestHourglassValue = 0;
        //Since the hourglass checks two positions to the right and two positions down loop only until array's length - 2
        for(int rowIndex = 0; rowIndex < arr.length - 2; rowIndex++){
            for(int columnIndex = 0; columnIndex < arr[0].length - 2; columnIndex++){
                int currentHourglassValue = hourglassValue(arr, rowIndex, columnIndex);
                //Update the higher value if it is the first iteration (otherwise, this solution wouldn't be able to support negative values, since the highestHourglassValue is set to 0) or if the current hourglass value is bigger than the highest hourglass value
                highestHourglassValue = ((rowIndex == 0 && columnIndex == 0 ) || highestHourglassValue < currentHourglassValue) ? currentHourglassValue : highestHourglassValue;
            }
        }
        return highestHourglassValue;
    }

    //Return the sum of the hourglass for a specific position
    static int hourglassValue(int[][] arr, int rowIndex, int columnIndex){
        return arr[rowIndex][columnIndex] + arr[rowIndex][columnIndex + 1] + arr[rowIndex][columnIndex + 2] + arr[rowIndex + 1][columnIndex + 1] + arr[rowIndex + 2][columnIndex] + arr[rowIndex + 2][columnIndex + 1] + arr[rowIndex + 2][columnIndex + 2];
    }
